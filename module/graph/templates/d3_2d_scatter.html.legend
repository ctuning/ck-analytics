<script src="$#ck_root_page_url#$action=pull&common_func=yes&cid=module:graph&filename=third-party/d3/d3.v3.min.js"></script>

<script>
var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = $#ck_image_width#$ - margin.left - margin.right,
    height = $#ck_image_height#$ - margin.top - margin.bottom;

/* 
 * value accessor - returns the value to encode for a given data object.
 * scale - maps value to a visual display encoding, such as a pixel position.
 * map function - maps from data value to display value
 * axis - sets up axis
 */ 

var xdata=$#cm_data_json#$;
var xinfo=$#cm_info_json#$;

// setup x 
var xValue = function(d) { return d[0];}, // data -> value
    xScale = d3.scale.linear().range([0, width]), // value -> display
    xMap = function(d) { return xScale(xValue(d));}, // data -> display
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");

// setup y
var yValue = function(d) { return d[1];}, // data -> value
    yScale = d3.scale.linear().range([height, 0]), // value -> display
    yMap = function(d) { return yScale(yValue(d));}, // data -> display
    yAxis = d3.svg.axis().scale(yScale).orient("left");

// setup fill color
var cValue = function(d) { return d.Manufacturer;},
    color = d3.scale.category10();

// add the graph canvas to the body of the webpage
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);


/* Check min/max on all axis */
xmin=-1;
xmax=-1;
ymin=-1;
ymax=-1;

var data;
var sgraph;

for (graph=0; graph < 100; graph++) {

   sgraph=graph.toString();

   if (!(sgraph in xdata)) break;

   data=xdata[sgraph];

   for (l=0; l<data.length; l++)
   {
     v=data[l];

     if (xmin==-1 || v[0]<xmin) xmin=v[0];
     if (xmax==-1 || v[0]>xmax) xmax=v[0];

     if (ymin==-1 || v[1]<ymin) ymin=v[1];
     if (ymax==-1 || v[1]>ymax) ymax=v[1];
   }
}

// don't want dots overlapping axis, so add in buffer to data domain
xScale.domain([0, xmax]);
yScale.domain([0, ymax]);

// x-axis
svg.append("g")
   .attr("class", "x axis")
   .attr("transform", "translate(0," + height + ")")
   .call(xAxis)
   .append("text")
   .attr("class", "label")
   .attr("x", width)
   .attr("y", -6)
   .style("text-anchor", "end")
   .text("$#axis_x_desc#$");

// y-axis
svg.append("g")
   .attr("class", "y axis")
   .call(yAxis)
   .append("text")
   .attr("class", "label")
   .attr("transform", "rotate(-90)")
   .attr("y", 6)
   .attr("dy", ".71em")
   .style("text-anchor", "end")
   .text("$#axis_y_desc#$");

for (graph=0; graph < 100; graph++) {

   sgraph=graph.toString();

   if (!(sgraph in xdata)) break;

   data=xdata[sgraph];

   // draw dots
   svg.selectAll(".dot")
      .data(data)
      .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 3.5)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .style("fill", function(d) { return color(cValue(d));}) 
      .on("click", function(d) {
        window.open("http://cTuning.org/"+d[2]);
      })
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d[2] + "<br/> (" + xValue(d) + ", " + yValue(d) + ")")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

   // draw legend
   var legend = svg.selectAll(".legend")
                   .data(color.domain())
                   .enter().append("g")
                   .attr("class", "legend")
                   .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

   // draw legend colored rectangles
   legend.append("rect")
         .attr("x", width - 18)
         .attr("width", 18)
         .attr("height", 18)
         .style("fill", color);

  // draw legend text
  legend.append("text")
        .attr("x", width - 24)
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .text(function(d) { return d;})
}

</script>
